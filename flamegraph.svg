<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="726" onload="init(evt)" viewBox="0 0 1200 726" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="726" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="709.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="709.00"> </text><svg id="frames" x="10" width="1180" total_samples="133762"><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (27,983 samples, 20.92%)</title><rect x="0.0217%" y="309" width="20.9200%" height="15" fill="rgb(227,0,7)" fg:x="29" fg:w="27983"/><text x="0.2717%" y="319.50">&lt;core::iter::adapters::zip::Zip&lt;A..</text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (27,983 samples, 20.92%)</title><rect x="0.0217%" y="293" width="20.9200%" height="15" fill="rgb(217,0,24)" fg:x="29" fg:w="27983"/><text x="0.2717%" y="303.50">&lt;core::iter::adapters::zip::Zip&lt;A..</text></g><g><title>&lt;nalgebra::base::iter::MatrixIter&lt;T,R,C,S&gt; as core::iter::traits::iterator::Iterator&gt;::next (27,983 samples, 20.92%)</title><rect x="0.0217%" y="277" width="20.9200%" height="15" fill="rgb(221,193,54)" fg:x="29" fg:w="27983"/><text x="0.2717%" y="287.50">&lt;nalgebra::base::iter::MatrixIter..</text></g><g><title>&lt;f32 as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (12,053 samples, 9.01%)</title><rect x="20.9417%" y="293" width="9.0108%" height="15" fill="rgb(248,212,6)" fg:x="28012" fg:w="12053"/><text x="21.1917%" y="303.50">&lt;f32 as core:..</text></g><g><title>core::iter::traits::iterator::Iterator::sum (129,526 samples, 96.83%)</title><rect x="0.0217%" y="373" width="96.8332%" height="15" fill="rgb(208,68,35)" fg:x="29" fg:w="129526"/><text x="0.2717%" y="383.50">core::iter::traits::iterator::Iterator::sum</text></g><g><title>&lt;f32 as core::iter::traits::accum::Sum&gt;::sum (129,526 samples, 96.83%)</title><rect x="0.0217%" y="357" width="96.8332%" height="15" fill="rgb(232,128,0)" fg:x="29" fg:w="129526"/><text x="0.2717%" y="367.50">&lt;f32 as core::iter::traits::accum::Sum&gt;::sum</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (129,526 samples, 96.83%)</title><rect x="0.0217%" y="341" width="96.8332%" height="15" fill="rgb(207,160,47)" fg:x="29" fg:w="129526"/><text x="0.2717%" y="351.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>core::iter::traits::iterator::Iterator::fold (129,526 samples, 96.83%)</title><rect x="0.0217%" y="325" width="96.8332%" height="15" fill="rgb(228,23,34)" fg:x="29" fg:w="129526"/><text x="0.2717%" y="335.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (101,543 samples, 75.91%)</title><rect x="20.9417%" y="309" width="75.9132%" height="15" fill="rgb(218,30,26)" fg:x="28012" fg:w="101543"/><text x="21.1917%" y="319.50">core::iter::adapters::map::map_fold::{{closure}}</text></g><g><title>gamm::main::{{closure}} (89,490 samples, 66.90%)</title><rect x="29.9525%" y="293" width="66.9024%" height="15" fill="rgb(220,122,19)" fg:x="40065" fg:w="89490"/><text x="30.2025%" y="303.50">gamm::main::{{closure}}</text></g><g><title>&lt;f32 as core::ops::arith::Add&gt;::add (188 samples, 0.14%)</title><rect x="97.0380%" y="277" width="0.1405%" height="15" fill="rgb(250,228,42)" fg:x="129800" fg:w="188"/><text x="97.2880%" y="287.50"></text></g><g><title>nalgebra::base::blas::&lt;impl nalgebra::base::matrix::Matrix&lt;T,D,nalgebra::base::dimension::Const&lt;1_usize&gt;,S&gt;&gt;::axpy (460 samples, 0.34%)</title><rect x="96.8593%" y="341" width="0.3439%" height="15" fill="rgb(240,193,28)" fg:x="129561" fg:w="460"/><text x="97.1093%" y="351.50"></text></g><g><title>nalgebra::base::blas::&lt;impl nalgebra::base::matrix::Matrix&lt;T,D,nalgebra::base::dimension::Const&lt;1_usize&gt;,S&gt;&gt;::axcpy (460 samples, 0.34%)</title><rect x="96.8593%" y="325" width="0.3439%" height="15" fill="rgb(216,20,37)" fg:x="129561" fg:w="460"/><text x="97.1093%" y="335.50"></text></g><g><title>nalgebra::base::blas_uninit::axcpy_uninit (460 samples, 0.34%)</title><rect x="96.8593%" y="309" width="0.3439%" height="15" fill="rgb(206,188,39)" fg:x="129561" fg:w="460"/><text x="97.1093%" y="319.50"></text></g><g><title>nalgebra::base::blas_uninit::array_axcpy (460 samples, 0.34%)</title><rect x="96.8593%" y="293" width="0.3439%" height="15" fill="rgb(217,207,13)" fg:x="129561" fg:w="460"/><text x="97.1093%" y="303.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (33 samples, 0.02%)</title><rect x="97.1786%" y="277" width="0.0247%" height="15" fill="rgb(231,73,38)" fg:x="129988" fg:w="33"/><text x="97.4286%" y="287.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (33 samples, 0.02%)</title><rect x="97.1786%" y="261" width="0.0247%" height="15" fill="rgb(225,20,46)" fg:x="129988" fg:w="33"/><text x="97.4286%" y="271.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (33 samples, 0.02%)</title><rect x="97.1786%" y="245" width="0.0247%" height="15" fill="rgb(210,31,41)" fg:x="129988" fg:w="33"/><text x="97.4286%" y="255.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (33 samples, 0.02%)</title><rect x="97.1786%" y="229" width="0.0247%" height="15" fill="rgb(221,200,47)" fg:x="129988" fg:w="33"/><text x="97.4286%" y="239.50"></text></g><g><title>gamm::baseline_single::beta_coocurring_amm (75 samples, 0.06%)</title><rect x="97.2032%" y="325" width="0.0561%" height="15" fill="rgb(226,26,5)" fg:x="130021" fg:w="75"/><text x="97.4532%" y="335.50"></text></g><g><title>&lt;f32 as core::ops::arith::AddAssign&gt;::add_assign (169 samples, 0.13%)</title><rect x="97.6092%" y="309" width="0.1263%" height="15" fill="rgb(249,33,26)" fg:x="130564" fg:w="169"/><text x="97.8592%" y="319.50"></text></g><g><title>nalgebra::base::blas::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::dot (869 samples, 0.65%)</title><rect x="97.2032%" y="341" width="0.6497%" height="15" fill="rgb(235,183,28)" fg:x="130021" fg:w="869"/><text x="97.4532%" y="351.50"></text></g><g><title>nalgebra::base::blas::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::dotx (794 samples, 0.59%)</title><rect x="97.2593%" y="325" width="0.5936%" height="15" fill="rgb(221,5,38)" fg:x="130096" fg:w="794"/><text x="97.5093%" y="335.50"></text></g><g><title>&lt;f32 as core::ops::arith::Mul&gt;::mul (157 samples, 0.12%)</title><rect x="97.7355%" y="309" width="0.1174%" height="15" fill="rgb(247,18,42)" fg:x="130733" fg:w="157"/><text x="97.9855%" y="319.50"></text></g><g><title>nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;::unscale_mut (19 samples, 0.01%)</title><rect x="97.8529%" y="341" width="0.0142%" height="15" fill="rgb(241,131,45)" fg:x="130890" fg:w="19"/><text x="98.1029%" y="351.50"></text></g><g><title>nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;::apply (19 samples, 0.01%)</title><rect x="97.8529%" y="325" width="0.0142%" height="15" fill="rgb(249,31,29)" fg:x="130890" fg:w="19"/><text x="98.1029%" y="335.50"></text></g><g><title>nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;::unscale_mut::{{closure}} (19 samples, 0.01%)</title><rect x="97.8529%" y="309" width="0.0142%" height="15" fill="rgb(225,111,53)" fg:x="130890" fg:w="19"/><text x="98.1029%" y="319.50"></text></g><g><title>gamm::common::qr (1,365 samples, 1.02%)</title><rect x="96.8579%" y="357" width="1.0205%" height="15" fill="rgb(238,160,17)" fg:x="129559" fg:w="1365"/><text x="97.1079%" y="367.50"></text></g><g><title>nalgebra::base::norm::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::norm (15 samples, 0.01%)</title><rect x="97.8671%" y="341" width="0.0112%" height="15" fill="rgb(214,148,48)" fg:x="130909" fg:w="15"/><text x="98.1171%" y="351.50"></text></g><g><title>nalgebra::base::norm::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::norm_squared (15 samples, 0.01%)</title><rect x="97.8671%" y="325" width="0.0112%" height="15" fill="rgb(232,36,49)" fg:x="130909" fg:w="15"/><text x="98.1171%" y="335.50"></text></g><g><title>nalgebra::base::blas::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::dotc (15 samples, 0.01%)</title><rect x="97.8671%" y="309" width="0.0112%" height="15" fill="rgb(209,103,24)" fg:x="130909" fg:w="15"/><text x="98.1171%" y="319.50"></text></g><g><title>nalgebra::base::blas::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::dotx (15 samples, 0.01%)</title><rect x="97.8671%" y="293" width="0.0112%" height="15" fill="rgb(229,88,8)" fg:x="130909" fg:w="15"/><text x="98.1171%" y="303.50"></text></g><g><title>&lt;matrixmultiply::x86::FusedMulAdd as matrixmultiply::x86::SMultiplyAdd&gt;::multiply_add (219 samples, 0.16%)</title><rect x="97.8970%" y="165" width="0.1637%" height="15" fill="rgb(213,181,19)" fg:x="130949" fg:w="219"/><text x="98.1470%" y="175.50"></text></g><g><title>core::core_arch::x86::fma::_mm256_fmadd_ps (219 samples, 0.16%)</title><rect x="97.8970%" y="149" width="0.1637%" height="15" fill="rgb(254,191,54)" fg:x="130949" fg:w="219"/><text x="98.1470%" y="159.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_load_ps (15 samples, 0.01%)</title><rect x="98.0607%" y="165" width="0.0112%" height="15" fill="rgb(241,83,37)" fg:x="131168" fg:w="15"/><text x="98.3107%" y="175.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_permute2f128_ps (34 samples, 0.03%)</title><rect x="98.0854%" y="165" width="0.0254%" height="15" fill="rgb(233,36,39)" fg:x="131201" fg:w="34"/><text x="98.3354%" y="175.50"></text></g><g><title>&lt;matrixmultiply::sgemm_kernel::KernelFma as matrixmultiply::kernel::GemmKernel&gt;::kernel (306 samples, 0.23%)</title><rect x="97.8925%" y="213" width="0.2288%" height="15" fill="rgb(226,3,54)" fg:x="130943" fg:w="306"/><text x="98.1425%" y="223.50"></text></g><g><title>matrixmultiply::sgemm_kernel::kernel_target_fma (305 samples, 0.23%)</title><rect x="97.8933%" y="197" width="0.2280%" height="15" fill="rgb(245,192,40)" fg:x="130944" fg:w="305"/><text x="98.1433%" y="207.50"></text></g><g><title>matrixmultiply::sgemm_kernel::kernel_x86_avx (303 samples, 0.23%)</title><rect x="97.8948%" y="181" width="0.2265%" height="15" fill="rgb(238,167,29)" fg:x="130946" fg:w="303"/><text x="98.1448%" y="191.50"></text></g><g><title>&lt;matrixmultiply::sgemm_kernel::KernelFma as matrixmultiply::kernel::GemmKernel&gt;::kernel (19 samples, 0.01%)</title><rect x="98.1213%" y="197" width="0.0142%" height="15" fill="rgb(232,182,51)" fg:x="131249" fg:w="19"/><text x="98.3713%" y="207.50"></text></g><g><title>matrixmultiply::sgemm_kernel::kernel_target_fma (19 samples, 0.01%)</title><rect x="98.1213%" y="181" width="0.0142%" height="15" fill="rgb(231,60,39)" fg:x="131249" fg:w="19"/><text x="98.3713%" y="191.50"></text></g><g><title>matrixmultiply::sgemm_kernel::kernel_x86_avx (19 samples, 0.01%)</title><rect x="98.1213%" y="165" width="0.0142%" height="15" fill="rgb(208,69,12)" fg:x="131249" fg:w="19"/><text x="98.3713%" y="175.50"></text></g><g><title>matrixmultiply::gemm::masked_kernel (21 samples, 0.02%)</title><rect x="98.1213%" y="213" width="0.0157%" height="15" fill="rgb(235,93,37)" fg:x="131249" fg:w="21"/><text x="98.3713%" y="223.50"></text></g><g><title>matrixmultiply::gemm::gemm_packed::{{closure}} (329 samples, 0.25%)</title><rect x="97.8918%" y="229" width="0.2460%" height="15" fill="rgb(213,116,39)" fg:x="130942" fg:w="329"/><text x="98.1418%" y="239.50"></text></g><g><title>matrixmultiply::gemm::gemm_packed (330 samples, 0.25%)</title><rect x="97.8918%" y="261" width="0.2467%" height="15" fill="rgb(222,207,29)" fg:x="130942" fg:w="330"/><text x="98.1418%" y="271.50"></text></g><g><title>matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (330 samples, 0.25%)</title><rect x="97.8918%" y="245" width="0.2467%" height="15" fill="rgb(206,96,30)" fg:x="130942" fg:w="330"/><text x="98.1418%" y="255.50"></text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::Mul&lt;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::mul (343 samples, 0.26%)</title><rect x="97.8880%" y="357" width="0.2564%" height="15" fill="rgb(218,138,4)" fg:x="130937" fg:w="343"/><text x="98.1380%" y="367.50"></text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::Mul&lt;&amp;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for &amp;nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::mul (343 samples, 0.26%)</title><rect x="97.8880%" y="341" width="0.2564%" height="15" fill="rgb(250,191,14)" fg:x="130937" fg:w="343"/><text x="98.1380%" y="351.50"></text></g><g><title>nalgebra::base::blas_uninit::gemm_uninit (343 samples, 0.26%)</title><rect x="97.8880%" y="325" width="0.2564%" height="15" fill="rgb(239,60,40)" fg:x="130937" fg:w="343"/><text x="98.1380%" y="335.50"></text></g><g><title>matrixmultiply::gemm::gemm_loop (343 samples, 0.26%)</title><rect x="97.8880%" y="309" width="0.2564%" height="15" fill="rgb(206,27,48)" fg:x="130937" fg:w="343"/><text x="98.1380%" y="319.50"></text></g><g><title>matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (338 samples, 0.25%)</title><rect x="97.8918%" y="293" width="0.2527%" height="15" fill="rgb(225,35,8)" fg:x="130942" fg:w="338"/><text x="98.1418%" y="303.50"></text></g><g><title>matrixmultiply::gemm::gemm_loop::{{closure}} (338 samples, 0.25%)</title><rect x="97.8918%" y="277" width="0.2527%" height="15" fill="rgb(250,213,24)" fg:x="130942" fg:w="338"/><text x="98.1418%" y="287.50"></text></g><g><title>matrixmultiply::gemm::gemm_packed (19 samples, 0.01%)</title><rect x="98.1475%" y="261" width="0.0142%" height="15" fill="rgb(247,123,22)" fg:x="131284" fg:w="19"/><text x="98.3975%" y="271.50"></text></g><g><title>matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (19 samples, 0.01%)</title><rect x="98.1475%" y="245" width="0.0142%" height="15" fill="rgb(231,138,38)" fg:x="131284" fg:w="19"/><text x="98.3975%" y="255.50"></text></g><g><title>matrixmultiply::gemm::gemm_packed::{{closure}} (19 samples, 0.01%)</title><rect x="98.1475%" y="229" width="0.0142%" height="15" fill="rgb(231,145,46)" fg:x="131284" fg:w="19"/><text x="98.3975%" y="239.50"></text></g><g><title>&lt;matrixmultiply::sgemm_kernel::KernelFma as matrixmultiply::kernel::GemmKernel&gt;::kernel (19 samples, 0.01%)</title><rect x="98.1475%" y="213" width="0.0142%" height="15" fill="rgb(251,118,11)" fg:x="131284" fg:w="19"/><text x="98.3975%" y="223.50"></text></g><g><title>matrixmultiply::sgemm_kernel::kernel_target_fma (19 samples, 0.01%)</title><rect x="98.1475%" y="197" width="0.0142%" height="15" fill="rgb(217,147,25)" fg:x="131284" fg:w="19"/><text x="98.3975%" y="207.50"></text></g><g><title>matrixmultiply::sgemm_kernel::kernel_x86_avx (19 samples, 0.01%)</title><rect x="98.1475%" y="181" width="0.0142%" height="15" fill="rgb(247,81,37)" fg:x="131284" fg:w="19"/><text x="98.3975%" y="191.50"></text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::MulAssign&lt;&amp;nalgebra::base::matrix::Matrix&lt;T,R2,C1,SB&gt;&gt; for nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::mul_assign (24 samples, 0.02%)</title><rect x="98.1445%" y="357" width="0.0179%" height="15" fill="rgb(209,12,38)" fg:x="131280" fg:w="24"/><text x="98.3945%" y="367.50"></text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::Mul&lt;&amp;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for &amp;nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::mul (24 samples, 0.02%)</title><rect x="98.1445%" y="341" width="0.0179%" height="15" fill="rgb(227,1,9)" fg:x="131280" fg:w="24"/><text x="98.3945%" y="351.50"></text></g><g><title>nalgebra::base::blas_uninit::gemm_uninit (24 samples, 0.02%)</title><rect x="98.1445%" y="325" width="0.0179%" height="15" fill="rgb(248,47,43)" fg:x="131280" fg:w="24"/><text x="98.3945%" y="335.50"></text></g><g><title>matrixmultiply::gemm::gemm_loop (24 samples, 0.02%)</title><rect x="98.1445%" y="309" width="0.0179%" height="15" fill="rgb(221,10,30)" fg:x="131280" fg:w="24"/><text x="98.3945%" y="319.50"></text></g><g><title>matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (20 samples, 0.01%)</title><rect x="98.1475%" y="293" width="0.0150%" height="15" fill="rgb(210,229,1)" fg:x="131284" fg:w="20"/><text x="98.3975%" y="303.50"></text></g><g><title>matrixmultiply::gemm::gemm_loop::{{closure}} (20 samples, 0.01%)</title><rect x="98.1475%" y="277" width="0.0150%" height="15" fill="rgb(222,148,37)" fg:x="131284" fg:w="20"/><text x="98.3975%" y="287.50"></text></g><g><title>nalgebra::linalg::svd::SVD&lt;T,R,C&gt;::new (30 samples, 0.02%)</title><rect x="98.1624%" y="309" width="0.0224%" height="15" fill="rgb(234,67,33)" fg:x="131304" fg:w="30"/><text x="98.4124%" y="319.50"></text></g><g><title>nalgebra::base::blas_uninit::array_axcpy (26 samples, 0.02%)</title><rect x="98.2058%" y="197" width="0.0194%" height="15" fill="rgb(247,98,35)" fg:x="131362" fg:w="26"/><text x="98.4558%" y="207.50"></text></g><g><title>nalgebra::base::blas::&lt;impl nalgebra::base::matrix::Matrix&lt;T,D,nalgebra::base::dimension::Const&lt;1_usize&gt;,S&gt;&gt;::axpy (31 samples, 0.02%)</title><rect x="98.2058%" y="245" width="0.0232%" height="15" fill="rgb(247,138,52)" fg:x="131362" fg:w="31"/><text x="98.4558%" y="255.50"></text></g><g><title>nalgebra::base::blas::&lt;impl nalgebra::base::matrix::Matrix&lt;T,D,nalgebra::base::dimension::Const&lt;1_usize&gt;,S&gt;&gt;::axcpy (31 samples, 0.02%)</title><rect x="98.2058%" y="229" width="0.0232%" height="15" fill="rgb(213,79,30)" fg:x="131362" fg:w="31"/><text x="98.4558%" y="239.50"></text></g><g><title>nalgebra::base::blas_uninit::axcpy_uninit (31 samples, 0.02%)</title><rect x="98.2058%" y="213" width="0.0232%" height="15" fill="rgb(246,177,23)" fg:x="131362" fg:w="31"/><text x="98.4558%" y="223.50"></text></g><g><title>&lt;f32 as core::ops::arith::AddAssign&gt;::add_assign (16 samples, 0.01%)</title><rect x="98.2394%" y="213" width="0.0120%" height="15" fill="rgb(230,62,27)" fg:x="131407" fg:w="16"/><text x="98.4894%" y="223.50"></text></g><g><title>nalgebra::base::blas::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::dotc (39 samples, 0.03%)</title><rect x="98.2289%" y="245" width="0.0292%" height="15" fill="rgb(216,154,8)" fg:x="131393" fg:w="39"/><text x="98.4789%" y="255.50"></text></g><g><title>nalgebra::base::blas::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::dotx (39 samples, 0.03%)</title><rect x="98.2289%" y="229" width="0.0292%" height="15" fill="rgb(244,35,45)" fg:x="131393" fg:w="39"/><text x="98.4789%" y="239.50"></text></g><g><title>nalgebra::geometry::reflection::Reflection&lt;T,D,S&gt;::reflect_with_sign (83 samples, 0.06%)</title><rect x="98.1983%" y="261" width="0.0621%" height="15" fill="rgb(251,115,12)" fg:x="131352" fg:w="83"/><text x="98.4483%" y="271.50"></text></g><g><title>nalgebra::linalg::householder::clear_column_unchecked (87 samples, 0.07%)</title><rect x="98.1975%" y="277" width="0.0650%" height="15" fill="rgb(240,54,50)" fg:x="131351" fg:w="87"/><text x="98.4475%" y="287.50"></text></g><g><title>nalgebra::base::blas_uninit::array_axcpy (28 samples, 0.02%)</title><rect x="98.2633%" y="165" width="0.0209%" height="15" fill="rgb(233,84,52)" fg:x="131439" fg:w="28"/><text x="98.5133%" y="175.50"></text></g><g><title>nalgebra::base::blas::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R1,C1,S&gt;&gt;::gerc (30 samples, 0.02%)</title><rect x="98.2633%" y="245" width="0.0224%" height="15" fill="rgb(207,117,47)" fg:x="131439" fg:w="30"/><text x="98.5133%" y="255.50"></text></g><g><title>nalgebra::base::blas::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R1,C1,S&gt;&gt;::gerx (30 samples, 0.02%)</title><rect x="98.2633%" y="229" width="0.0224%" height="15" fill="rgb(249,43,39)" fg:x="131439" fg:w="30"/><text x="98.5133%" y="239.50"></text></g><g><title>nalgebra::base::blas::&lt;impl nalgebra::base::matrix::Matrix&lt;T,D,nalgebra::base::dimension::Const&lt;1_usize&gt;,S&gt;&gt;::axpy (30 samples, 0.02%)</title><rect x="98.2633%" y="213" width="0.0224%" height="15" fill="rgb(209,38,44)" fg:x="131439" fg:w="30"/><text x="98.5133%" y="223.50"></text></g><g><title>nalgebra::base::blas::&lt;impl nalgebra::base::matrix::Matrix&lt;T,D,nalgebra::base::dimension::Const&lt;1_usize&gt;,S&gt;&gt;::axcpy (30 samples, 0.02%)</title><rect x="98.2633%" y="197" width="0.0224%" height="15" fill="rgb(236,212,23)" fg:x="131439" fg:w="30"/><text x="98.5133%" y="207.50"></text></g><g><title>nalgebra::base::blas_uninit::axcpy_uninit (30 samples, 0.02%)</title><rect x="98.2633%" y="181" width="0.0224%" height="15" fill="rgb(242,79,21)" fg:x="131439" fg:w="30"/><text x="98.5133%" y="191.50"></text></g><g><title>nalgebra::base::blas_uninit::array_axcpy (19 samples, 0.01%)</title><rect x="98.2858%" y="165" width="0.0142%" height="15" fill="rgb(211,96,35)" fg:x="131469" fg:w="19"/><text x="98.5358%" y="175.50"></text></g><g><title>nalgebra::geometry::reflection::Reflection&lt;T,D,S&gt;::reflect_rows_with_sign (50 samples, 0.04%)</title><rect x="98.2633%" y="261" width="0.0374%" height="15" fill="rgb(253,215,40)" fg:x="131439" fg:w="50"/><text x="98.5133%" y="271.50"></text></g><g><title>nalgebra::base::ops::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::mul_to (20 samples, 0.01%)</title><rect x="98.2858%" y="245" width="0.0150%" height="15" fill="rgb(211,81,21)" fg:x="131469" fg:w="20"/><text x="98.5358%" y="255.50"></text></g><g><title>nalgebra::base::blas::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R1,C1,S&gt;&gt;::gemm (20 samples, 0.01%)</title><rect x="98.2858%" y="229" width="0.0150%" height="15" fill="rgb(208,190,38)" fg:x="131469" fg:w="20"/><text x="98.5358%" y="239.50"></text></g><g><title>nalgebra::base::blas_uninit::gemm_uninit (20 samples, 0.01%)</title><rect x="98.2858%" y="213" width="0.0150%" height="15" fill="rgb(235,213,38)" fg:x="131469" fg:w="20"/><text x="98.5358%" y="223.50"></text></g><g><title>nalgebra::base::blas_uninit::gemv_uninit (20 samples, 0.01%)</title><rect x="98.2858%" y="197" width="0.0150%" height="15" fill="rgb(237,122,38)" fg:x="131469" fg:w="20"/><text x="98.5358%" y="207.50"></text></g><g><title>nalgebra::base::blas_uninit::axcpy_uninit (20 samples, 0.01%)</title><rect x="98.2858%" y="181" width="0.0150%" height="15" fill="rgb(244,218,35)" fg:x="131469" fg:w="20"/><text x="98.5358%" y="191.50"></text></g><g><title>nalgebra::linalg::bidiagonal::Bidiagonal&lt;T,R,C&gt;::new (139 samples, 0.10%)</title><rect x="98.1975%" y="293" width="0.1039%" height="15" fill="rgb(240,68,47)" fg:x="131351" fg:w="139"/><text x="98.4475%" y="303.50"></text></g><g><title>nalgebra::linalg::householder::clear_row_unchecked (52 samples, 0.04%)</title><rect x="98.2626%" y="277" width="0.0389%" height="15" fill="rgb(210,16,53)" fg:x="131438" fg:w="52"/><text x="98.5126%" y="287.50"></text></g><g><title>nalgebra::base::blas_uninit::array_axcpy (24 samples, 0.02%)</title><rect x="98.3059%" y="213" width="0.0179%" height="15" fill="rgb(235,124,12)" fg:x="131496" fg:w="24"/><text x="98.5559%" y="223.50"></text></g><g><title>nalgebra::base::blas::&lt;impl nalgebra::base::matrix::Matrix&lt;T,D,nalgebra::base::dimension::Const&lt;1_usize&gt;,S&gt;&gt;::axpy (27 samples, 0.02%)</title><rect x="98.3059%" y="261" width="0.0202%" height="15" fill="rgb(224,169,11)" fg:x="131496" fg:w="27"/><text x="98.5559%" y="271.50"></text></g><g><title>nalgebra::base::blas::&lt;impl nalgebra::base::matrix::Matrix&lt;T,D,nalgebra::base::dimension::Const&lt;1_usize&gt;,S&gt;&gt;::axcpy (27 samples, 0.02%)</title><rect x="98.3059%" y="245" width="0.0202%" height="15" fill="rgb(250,166,2)" fg:x="131496" fg:w="27"/><text x="98.5559%" y="255.50"></text></g><g><title>nalgebra::base::blas_uninit::axcpy_uninit (27 samples, 0.02%)</title><rect x="98.3059%" y="229" width="0.0202%" height="15" fill="rgb(242,216,29)" fg:x="131496" fg:w="27"/><text x="98.5559%" y="239.50"></text></g><g><title>nalgebra::base::blas::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::dotc (28 samples, 0.02%)</title><rect x="98.3261%" y="261" width="0.0209%" height="15" fill="rgb(230,116,27)" fg:x="131523" fg:w="28"/><text x="98.5761%" y="271.50"></text></g><g><title>nalgebra::base::blas::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::dotx (28 samples, 0.02%)</title><rect x="98.3261%" y="245" width="0.0209%" height="15" fill="rgb(228,99,48)" fg:x="131523" fg:w="28"/><text x="98.5761%" y="255.50"></text></g><g><title>nalgebra::linalg::bidiagonal::Bidiagonal&lt;T,R,C&gt;::u (62 samples, 0.05%)</title><rect x="98.3015%" y="293" width="0.0464%" height="15" fill="rgb(253,11,6)" fg:x="131490" fg:w="62"/><text x="98.5515%" y="303.50"></text></g><g><title>nalgebra::geometry::reflection::Reflection&lt;T,D,S&gt;::reflect_with_sign (62 samples, 0.05%)</title><rect x="98.3015%" y="277" width="0.0464%" height="15" fill="rgb(247,143,39)" fg:x="131490" fg:w="62"/><text x="98.5515%" y="287.50"></text></g><g><title>nalgebra::base::blas_uninit::array_axcpy (26 samples, 0.02%)</title><rect x="98.3515%" y="181" width="0.0194%" height="15" fill="rgb(236,97,10)" fg:x="131557" fg:w="26"/><text x="98.6015%" y="191.50"></text></g><g><title>nalgebra::base::blas::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R1,C1,S&gt;&gt;::gerc (31 samples, 0.02%)</title><rect x="98.3501%" y="261" width="0.0232%" height="15" fill="rgb(233,208,19)" fg:x="131555" fg:w="31"/><text x="98.6001%" y="271.50"></text></g><g><title>nalgebra::base::blas::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R1,C1,S&gt;&gt;::gerx (31 samples, 0.02%)</title><rect x="98.3501%" y="245" width="0.0232%" height="15" fill="rgb(216,164,2)" fg:x="131555" fg:w="31"/><text x="98.6001%" y="255.50"></text></g><g><title>nalgebra::base::blas::&lt;impl nalgebra::base::matrix::Matrix&lt;T,D,nalgebra::base::dimension::Const&lt;1_usize&gt;,S&gt;&gt;::axpy (30 samples, 0.02%)</title><rect x="98.3508%" y="229" width="0.0224%" height="15" fill="rgb(220,129,5)" fg:x="131556" fg:w="30"/><text x="98.6008%" y="239.50"></text></g><g><title>nalgebra::base::blas::&lt;impl nalgebra::base::matrix::Matrix&lt;T,D,nalgebra::base::dimension::Const&lt;1_usize&gt;,S&gt;&gt;::axcpy (30 samples, 0.02%)</title><rect x="98.3508%" y="213" width="0.0224%" height="15" fill="rgb(242,17,10)" fg:x="131556" fg:w="30"/><text x="98.6008%" y="223.50"></text></g><g><title>nalgebra::base::blas_uninit::axcpy_uninit (30 samples, 0.02%)</title><rect x="98.3508%" y="197" width="0.0224%" height="15" fill="rgb(242,107,0)" fg:x="131556" fg:w="30"/><text x="98.6008%" y="207.50"></text></g><g><title>nalgebra::base::blas_uninit::array_axcpy (28 samples, 0.02%)</title><rect x="98.3762%" y="181" width="0.0209%" height="15" fill="rgb(251,28,31)" fg:x="131590" fg:w="28"/><text x="98.6262%" y="191.50"></text></g><g><title>nalgebra::linalg::bidiagonal::Bidiagonal&lt;T,R,C&gt;::v_t (67 samples, 0.05%)</title><rect x="98.3478%" y="293" width="0.0501%" height="15" fill="rgb(233,223,10)" fg:x="131552" fg:w="67"/><text x="98.5978%" y="303.50"></text></g><g><title>nalgebra::geometry::reflection::Reflection&lt;T,D,S&gt;::reflect_rows_with_sign (64 samples, 0.05%)</title><rect x="98.3501%" y="277" width="0.0478%" height="15" fill="rgb(215,21,27)" fg:x="131555" fg:w="64"/><text x="98.6001%" y="287.50"></text></g><g><title>nalgebra::base::ops::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::mul_to (33 samples, 0.02%)</title><rect x="98.3732%" y="261" width="0.0247%" height="15" fill="rgb(232,23,21)" fg:x="131586" fg:w="33"/><text x="98.6232%" y="271.50"></text></g><g><title>nalgebra::base::blas::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R1,C1,S&gt;&gt;::gemm (33 samples, 0.02%)</title><rect x="98.3732%" y="245" width="0.0247%" height="15" fill="rgb(244,5,23)" fg:x="131586" fg:w="33"/><text x="98.6232%" y="255.50"></text></g><g><title>nalgebra::base::blas_uninit::gemm_uninit (33 samples, 0.02%)</title><rect x="98.3732%" y="229" width="0.0247%" height="15" fill="rgb(226,81,46)" fg:x="131586" fg:w="33"/><text x="98.6232%" y="239.50"></text></g><g><title>nalgebra::base::blas_uninit::gemv_uninit (33 samples, 0.02%)</title><rect x="98.3732%" y="213" width="0.0247%" height="15" fill="rgb(247,70,30)" fg:x="131586" fg:w="33"/><text x="98.6232%" y="223.50"></text></g><g><title>nalgebra::base::blas_uninit::axcpy_uninit (31 samples, 0.02%)</title><rect x="98.3747%" y="197" width="0.0232%" height="15" fill="rgb(212,68,19)" fg:x="131588" fg:w="31"/><text x="98.6247%" y="207.50"></text></g><g><title>&lt;f32 as simba::scalar::complex::ComplexField&gt;::sqrt (16 samples, 0.01%)</title><rect x="98.4114%" y="277" width="0.0120%" height="15" fill="rgb(240,187,13)" fg:x="131637" fg:w="16"/><text x="98.6614%" y="287.50"></text></g><g><title>std::f32::&lt;impl f32&gt;::sqrt (16 samples, 0.01%)</title><rect x="98.4114%" y="261" width="0.0120%" height="15" fill="rgb(223,113,26)" fg:x="131637" fg:w="16"/><text x="98.6614%" y="271.50"></text></g><g><title>nalgebra::linalg::givens::GivensRotation&lt;T&gt;::cancel_y (38 samples, 0.03%)</title><rect x="98.3979%" y="293" width="0.0284%" height="15" fill="rgb(206,192,2)" fg:x="131619" fg:w="38"/><text x="98.6479%" y="303.50"></text></g><g><title>&lt;f32 as core::ops::arith::Mul&gt;::mul (36 samples, 0.03%)</title><rect x="98.5190%" y="277" width="0.0269%" height="15" fill="rgb(241,108,4)" fg:x="131781" fg:w="36"/><text x="98.7690%" y="287.50"></text></g><g><title>&lt;f32 as simba::scalar::complex::ComplexField&gt;::scale (85 samples, 0.06%)</title><rect x="98.5489%" y="277" width="0.0635%" height="15" fill="rgb(247,173,49)" fg:x="131821" fg:w="85"/><text x="98.7989%" y="287.50"></text></g><g><title>nalgebra::linalg::givens::GivensRotation&lt;T&gt;::rotate (285 samples, 0.21%)</title><rect x="98.4263%" y="293" width="0.2131%" height="15" fill="rgb(224,114,35)" fg:x="131657" fg:w="285"/><text x="98.6763%" y="303.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (36 samples, 0.03%)</title><rect x="98.6125%" y="277" width="0.0269%" height="15" fill="rgb(245,159,27)" fg:x="131906" fg:w="36"/><text x="98.8625%" y="287.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (36 samples, 0.03%)</title><rect x="98.6125%" y="261" width="0.0269%" height="15" fill="rgb(245,172,44)" fg:x="131906" fg:w="36"/><text x="98.8625%" y="271.50"></text></g><g><title>&lt;f32 as core::ops::arith::Add&gt;::add (34 samples, 0.03%)</title><rect x="98.6693%" y="277" width="0.0254%" height="15" fill="rgb(236,23,11)" fg:x="131982" fg:w="34"/><text x="98.9193%" y="287.50"></text></g><g><title>nalgebra::linalg::givens::GivensRotation&lt;T&gt;::rotate_rows (87 samples, 0.07%)</title><rect x="98.6394%" y="293" width="0.0650%" height="15" fill="rgb(205,117,38)" fg:x="131942" fg:w="87"/><text x="98.8894%" y="303.50"></text></g><g><title>nalgebra::linalg::svd::SVD&lt;T,R,C&gt;::new_unordered (738 samples, 0.55%)</title><rect x="98.1624%" y="325" width="0.5517%" height="15" fill="rgb(237,72,25)" fg:x="131304" fg:w="738"/><text x="98.4124%" y="335.50"></text></g><g><title>nalgebra::linalg::svd::SVD&lt;T,R,C&gt;::try_new_unordered (708 samples, 0.53%)</title><rect x="98.1848%" y="309" width="0.5293%" height="15" fill="rgb(244,70,9)" fg:x="131334" fg:w="708"/><text x="98.4348%" y="319.50"></text></g><g><title>gamm::baseline_single::beta_coocurring_amm (2,491 samples, 1.86%)</title><rect x="96.8549%" y="373" width="1.8623%" height="15" fill="rgb(217,125,39)" fg:x="129555" fg:w="2491"/><text x="97.1049%" y="383.50">g..</text></g><g><title>nalgebra::linalg::decomposition::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::svd (742 samples, 0.55%)</title><rect x="98.1624%" y="357" width="0.5547%" height="15" fill="rgb(235,36,10)" fg:x="131304" fg:w="742"/><text x="98.4124%" y="367.50"></text></g><g><title>nalgebra::linalg::svd::SVD&lt;T,R,C&gt;::new (742 samples, 0.55%)</title><rect x="98.1624%" y="341" width="0.5547%" height="15" fill="rgb(251,123,47)" fg:x="131304" fg:w="742"/><text x="98.4124%" y="351.50"></text></g><g><title>nalgebra::linalg::svd::SVD&lt;T,R,C&gt;::new (18 samples, 0.01%)</title><rect x="98.7171%" y="309" width="0.0135%" height="15" fill="rgb(221,13,13)" fg:x="132046" fg:w="18"/><text x="98.9671%" y="319.50"></text></g><g><title>&lt;f32 as core::ops::arith::Add&gt;::add (28 samples, 0.02%)</title><rect x="98.8068%" y="181" width="0.0209%" height="15" fill="rgb(238,131,9)" fg:x="132166" fg:w="28"/><text x="99.0568%" y="191.50"></text></g><g><title>&lt;f32 as core::ops::arith::Mul&gt;::mul (36 samples, 0.03%)</title><rect x="98.8278%" y="181" width="0.0269%" height="15" fill="rgb(211,50,8)" fg:x="132194" fg:w="36"/><text x="99.0778%" y="191.50"></text></g><g><title>nalgebra::base::blas_uninit::array_axcpy (131 samples, 0.10%)</title><rect x="98.7605%" y="197" width="0.0979%" height="15" fill="rgb(245,182,24)" fg:x="132104" fg:w="131"/><text x="99.0105%" y="207.50"></text></g><g><title>nalgebra::base::blas::&lt;impl nalgebra::base::matrix::Matrix&lt;T,D,nalgebra::base::dimension::Const&lt;1_usize&gt;,S&gt;&gt;::axpy (132 samples, 0.10%)</title><rect x="98.7605%" y="245" width="0.0987%" height="15" fill="rgb(242,14,37)" fg:x="132104" fg:w="132"/><text x="99.0105%" y="255.50"></text></g><g><title>nalgebra::base::blas::&lt;impl nalgebra::base::matrix::Matrix&lt;T,D,nalgebra::base::dimension::Const&lt;1_usize&gt;,S&gt;&gt;::axcpy (132 samples, 0.10%)</title><rect x="98.7605%" y="229" width="0.0987%" height="15" fill="rgb(246,228,12)" fg:x="132104" fg:w="132"/><text x="99.0105%" y="239.50"></text></g><g><title>nalgebra::base::blas_uninit::axcpy_uninit (132 samples, 0.10%)</title><rect x="98.7605%" y="213" width="0.0987%" height="15" fill="rgb(213,55,15)" fg:x="132104" fg:w="132"/><text x="99.0105%" y="223.50"></text></g><g><title>&lt;f32 as core::ops::arith::AddAssign&gt;::add_assign (68 samples, 0.05%)</title><rect x="98.9534%" y="213" width="0.0508%" height="15" fill="rgb(209,9,3)" fg:x="132362" fg:w="68"/><text x="99.2034%" y="223.50"></text></g><g><title>&lt;f32 as core::ops::arith::Mul&gt;::mul (34 samples, 0.03%)</title><rect x="99.0042%" y="213" width="0.0254%" height="15" fill="rgb(230,59,30)" fg:x="132430" fg:w="34"/><text x="99.2542%" y="223.50"></text></g><g><title>nalgebra::base::blas::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::dotx (229 samples, 0.17%)</title><rect x="98.8592%" y="229" width="0.1712%" height="15" fill="rgb(209,121,21)" fg:x="132236" fg:w="229"/><text x="99.1092%" y="239.50"></text></g><g><title>nalgebra::base::blas::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::dotc (230 samples, 0.17%)</title><rect x="98.8592%" y="245" width="0.1719%" height="15" fill="rgb(220,109,13)" fg:x="132236" fg:w="230"/><text x="99.1092%" y="255.50"></text></g><g><title>nalgebra::linalg::householder::clear_column_unchecked (381 samples, 0.28%)</title><rect x="98.7470%" y="277" width="0.2848%" height="15" fill="rgb(232,18,1)" fg:x="132086" fg:w="381"/><text x="98.9970%" y="287.50"></text></g><g><title>nalgebra::geometry::reflection::Reflection&lt;T,D,S&gt;::reflect_with_sign (381 samples, 0.28%)</title><rect x="98.7470%" y="261" width="0.2848%" height="15" fill="rgb(215,41,42)" fg:x="132086" fg:w="381"/><text x="98.9970%" y="271.50"></text></g><g><title>&lt;f32 as core::ops::arith::Add&gt;::add (37 samples, 0.03%)</title><rect x="99.1059%" y="149" width="0.0277%" height="15" fill="rgb(224,123,36)" fg:x="132566" fg:w="37"/><text x="99.3559%" y="159.50"></text></g><g><title>&lt;f32 as core::ops::arith::Mul&gt;::mul (40 samples, 0.03%)</title><rect x="99.1335%" y="149" width="0.0299%" height="15" fill="rgb(240,125,3)" fg:x="132603" fg:w="40"/><text x="99.3835%" y="159.50"></text></g><g><title>nalgebra::base::blas_uninit::array_axcpy (181 samples, 0.14%)</title><rect x="99.0356%" y="165" width="0.1353%" height="15" fill="rgb(205,98,50)" fg:x="132472" fg:w="181"/><text x="99.2856%" y="175.50"></text></g><g><title>nalgebra::base::blas::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R1,C1,S&gt;&gt;::gerc (183 samples, 0.14%)</title><rect x="99.0349%" y="245" width="0.1368%" height="15" fill="rgb(205,185,37)" fg:x="132471" fg:w="183"/><text x="99.2849%" y="255.50"></text></g><g><title>nalgebra::base::blas::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R1,C1,S&gt;&gt;::gerx (183 samples, 0.14%)</title><rect x="99.0349%" y="229" width="0.1368%" height="15" fill="rgb(238,207,15)" fg:x="132471" fg:w="183"/><text x="99.2849%" y="239.50"></text></g><g><title>nalgebra::base::blas::&lt;impl nalgebra::base::matrix::Matrix&lt;T,D,nalgebra::base::dimension::Const&lt;1_usize&gt;,S&gt;&gt;::axpy (182 samples, 0.14%)</title><rect x="99.0356%" y="213" width="0.1361%" height="15" fill="rgb(213,199,42)" fg:x="132472" fg:w="182"/><text x="99.2856%" y="223.50"></text></g><g><title>nalgebra::base::blas::&lt;impl nalgebra::base::matrix::Matrix&lt;T,D,nalgebra::base::dimension::Const&lt;1_usize&gt;,S&gt;&gt;::axcpy (182 samples, 0.14%)</title><rect x="99.0356%" y="197" width="0.1361%" height="15" fill="rgb(235,201,11)" fg:x="132472" fg:w="182"/><text x="99.2856%" y="207.50"></text></g><g><title>nalgebra::base::blas_uninit::axcpy_uninit (182 samples, 0.14%)</title><rect x="99.0356%" y="181" width="0.1361%" height="15" fill="rgb(207,46,11)" fg:x="132472" fg:w="182"/><text x="99.2856%" y="191.50"></text></g><g><title>&lt;f32 as core::ops::arith::Add&gt;::add (61 samples, 0.05%)</title><rect x="99.2397%" y="149" width="0.0456%" height="15" fill="rgb(241,35,35)" fg:x="132745" fg:w="61"/><text x="99.4897%" y="159.50"></text></g><g><title>&lt;f32 as core::ops::arith::Mul&gt;::mul (38 samples, 0.03%)</title><rect x="99.2853%" y="149" width="0.0284%" height="15" fill="rgb(243,32,47)" fg:x="132806" fg:w="38"/><text x="99.5353%" y="159.50"></text></g><g><title>nalgebra::linalg::bidiagonal::Bidiagonal&lt;T,R,C&gt;::new (764 samples, 0.57%)</title><rect x="98.7470%" y="293" width="0.5712%" height="15" fill="rgb(247,202,23)" fg:x="132086" fg:w="764"/><text x="98.9970%" y="303.50"></text></g><g><title>nalgebra::linalg::householder::clear_row_unchecked (383 samples, 0.29%)</title><rect x="99.0319%" y="277" width="0.2863%" height="15" fill="rgb(219,102,11)" fg:x="132467" fg:w="383"/><text x="99.2819%" y="287.50"></text></g><g><title>nalgebra::geometry::reflection::Reflection&lt;T,D,S&gt;::reflect_rows_with_sign (379 samples, 0.28%)</title><rect x="99.0349%" y="261" width="0.2833%" height="15" fill="rgb(243,110,44)" fg:x="132471" fg:w="379"/><text x="99.2849%" y="271.50"></text></g><g><title>nalgebra::base::ops::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::mul_to (196 samples, 0.15%)</title><rect x="99.1717%" y="245" width="0.1465%" height="15" fill="rgb(222,74,54)" fg:x="132654" fg:w="196"/><text x="99.4217%" y="255.50"></text></g><g><title>nalgebra::base::blas::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R1,C1,S&gt;&gt;::gemm (196 samples, 0.15%)</title><rect x="99.1717%" y="229" width="0.1465%" height="15" fill="rgb(216,99,12)" fg:x="132654" fg:w="196"/><text x="99.4217%" y="239.50"></text></g><g><title>nalgebra::base::blas_uninit::gemm_uninit (196 samples, 0.15%)</title><rect x="99.1717%" y="213" width="0.1465%" height="15" fill="rgb(226,22,26)" fg:x="132654" fg:w="196"/><text x="99.4217%" y="223.50"></text></g><g><title>nalgebra::base::blas_uninit::gemv_uninit (196 samples, 0.15%)</title><rect x="99.1717%" y="197" width="0.1465%" height="15" fill="rgb(217,163,10)" fg:x="132654" fg:w="196"/><text x="99.4217%" y="207.50"></text></g><g><title>nalgebra::base::blas_uninit::axcpy_uninit (194 samples, 0.15%)</title><rect x="99.1732%" y="181" width="0.1450%" height="15" fill="rgb(213,25,53)" fg:x="132656" fg:w="194"/><text x="99.4232%" y="191.50"></text></g><g><title>nalgebra::base::blas_uninit::array_axcpy (194 samples, 0.15%)</title><rect x="99.1732%" y="165" width="0.1450%" height="15" fill="rgb(252,105,26)" fg:x="132656" fg:w="194"/><text x="99.4232%" y="175.50"></text></g><g><title>nalgebra::linalg::givens::GivensRotation&lt;T&gt;::cancel_y (27 samples, 0.02%)</title><rect x="99.3182%" y="293" width="0.0202%" height="15" fill="rgb(220,39,43)" fg:x="132850" fg:w="27"/><text x="99.5682%" y="303.50"></text></g><g><title>nalgebra::linalg::svd::SVD&lt;T,R,C&gt;::new_unordered (832 samples, 0.62%)</title><rect x="98.7171%" y="325" width="0.6220%" height="15" fill="rgb(229,68,48)" fg:x="132046" fg:w="832"/><text x="98.9671%" y="335.50"></text></g><g><title>nalgebra::linalg::svd::SVD&lt;T,R,C&gt;::try_new_unordered (814 samples, 0.61%)</title><rect x="98.7306%" y="309" width="0.6085%" height="15" fill="rgb(252,8,32)" fg:x="132064" fg:w="814"/><text x="98.9806%" y="319.50"></text></g><g><title>gamm::common::find_l2_norm (833 samples, 0.62%)</title><rect x="98.7171%" y="373" width="0.6227%" height="15" fill="rgb(223,20,43)" fg:x="132046" fg:w="833"/><text x="98.9671%" y="383.50"></text></g><g><title>nalgebra::linalg::decomposition::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::svd (833 samples, 0.62%)</title><rect x="98.7171%" y="357" width="0.6227%" height="15" fill="rgb(229,81,49)" fg:x="132046" fg:w="833"/><text x="98.9671%" y="367.50"></text></g><g><title>nalgebra::linalg::svd::SVD&lt;T,R,C&gt;::new (833 samples, 0.62%)</title><rect x="98.7171%" y="341" width="0.6227%" height="15" fill="rgb(236,28,36)" fg:x="132046" fg:w="833"/><text x="98.9671%" y="351.50"></text></g><g><title>std::io::buffered::bufreader::BufReader&lt;R&gt;::buffer (18 samples, 0.01%)</title><rect x="99.4587%" y="325" width="0.0135%" height="15" fill="rgb(249,185,26)" fg:x="133038" fg:w="18"/><text x="99.7087%" y="335.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_exact (55 samples, 0.04%)</title><rect x="99.4326%" y="341" width="0.0411%" height="15" fill="rgb(249,174,33)" fg:x="133003" fg:w="55"/><text x="99.6826%" y="351.50"></text></g><g><title>gamm::load_matrices (216 samples, 0.16%)</title><rect x="99.3399%" y="373" width="0.1615%" height="15" fill="rgb(233,201,37)" fg:x="132879" fg:w="216"/><text x="99.5899%" y="383.50"></text></g><g><title>gamm::load_matrix (216 samples, 0.16%)</title><rect x="99.3399%" y="357" width="0.1615%" height="15" fill="rgb(221,78,26)" fg:x="132879" fg:w="216"/><text x="99.5899%" y="367.50"></text></g><g><title>nalgebra::base::construction::&lt;impl nalgebra::base::matrix::Matrix&lt;T,nalgebra::base::dimension::Dynamic,nalgebra::base::dimension::Dynamic,&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;T,nalgebra::base::dimension::Dynamic,nalgebra::base::dimension::Dynamic&gt;&gt;::Buffer&gt;&gt;::zeros (35 samples, 0.03%)</title><rect x="99.4752%" y="341" width="0.0262%" height="15" fill="rgb(250,127,30)" fg:x="133060" fg:w="35"/><text x="99.7252%" y="351.50"></text></g><g><title>nalgebra::base::construction::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;T,R,C&gt;&gt;::Buffer&gt;&gt;::zeros_generic (35 samples, 0.03%)</title><rect x="99.4752%" y="325" width="0.0262%" height="15" fill="rgb(230,49,44)" fg:x="133060" fg:w="35"/><text x="99.7252%" y="335.50"></text></g><g><title>nalgebra::base::construction::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;T,R,C&gt;&gt;::Buffer&gt;&gt;::from_element_generic (35 samples, 0.03%)</title><rect x="99.4752%" y="309" width="0.0262%" height="15" fill="rgb(229,67,23)" fg:x="133060" fg:w="35"/><text x="99.7252%" y="319.50"></text></g><g><title>nalgebra::base::construction::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;T,R,C&gt;&gt;::Buffer&gt;&gt;::from_iterator_generic (35 samples, 0.03%)</title><rect x="99.4752%" y="293" width="0.0262%" height="15" fill="rgb(249,83,47)" fg:x="133060" fg:w="35"/><text x="99.7252%" y="303.50"></text></g><g><title>&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;T,nalgebra::base::dimension::Dynamic,C&gt;&gt;::allocate_from_iterator (35 samples, 0.03%)</title><rect x="99.4752%" y="277" width="0.0262%" height="15" fill="rgb(215,43,3)" fg:x="133060" fg:w="35"/><text x="99.7252%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (35 samples, 0.03%)</title><rect x="99.4752%" y="261" width="0.0262%" height="15" fill="rgb(238,154,13)" fg:x="133060" fg:w="35"/><text x="99.7252%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (35 samples, 0.03%)</title><rect x="99.4752%" y="245" width="0.0262%" height="15" fill="rgb(219,56,2)" fg:x="133060" fg:w="35"/><text x="99.7252%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (35 samples, 0.03%)</title><rect x="99.4752%" y="229" width="0.0262%" height="15" fill="rgb(233,0,4)" fg:x="133060" fg:w="35"/><text x="99.7252%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (35 samples, 0.03%)</title><rect x="99.4752%" y="213" width="0.0262%" height="15" fill="rgb(235,30,7)" fg:x="133060" fg:w="35"/><text x="99.7252%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (35 samples, 0.03%)</title><rect x="99.4752%" y="197" width="0.0262%" height="15" fill="rgb(250,79,13)" fg:x="133060" fg:w="35"/><text x="99.7252%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (35 samples, 0.03%)</title><rect x="99.4752%" y="181" width="0.0262%" height="15" fill="rgb(211,146,34)" fg:x="133060" fg:w="35"/><text x="99.7252%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (35 samples, 0.03%)</title><rect x="99.4752%" y="165" width="0.0262%" height="15" fill="rgb(228,22,38)" fg:x="133060" fg:w="35"/><text x="99.7252%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (35 samples, 0.03%)</title><rect x="99.4752%" y="149" width="0.0262%" height="15" fill="rgb(235,168,5)" fg:x="133060" fg:w="35"/><text x="99.7252%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (35 samples, 0.03%)</title><rect x="99.4752%" y="133" width="0.0262%" height="15" fill="rgb(221,155,16)" fg:x="133060" fg:w="35"/><text x="99.7252%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (35 samples, 0.03%)</title><rect x="99.4752%" y="117" width="0.0262%" height="15" fill="rgb(215,215,53)" fg:x="133060" fg:w="35"/><text x="99.7252%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::ok::{{closure}} (35 samples, 0.03%)</title><rect x="99.4752%" y="101" width="0.0262%" height="15" fill="rgb(223,4,10)" fg:x="133060" fg:w="35"/><text x="99.7252%" y="111.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (35 samples, 0.03%)</title><rect x="99.4752%" y="85" width="0.0262%" height="15" fill="rgb(234,103,6)" fg:x="133060" fg:w="35"/><text x="99.7252%" y="95.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend::{{closure}} (35 samples, 0.03%)</title><rect x="99.4752%" y="69" width="0.0262%" height="15" fill="rgb(227,97,0)" fg:x="133060" fg:w="35"/><text x="99.7252%" y="79.50"></text></g><g><title>core::ptr::write (35 samples, 0.03%)</title><rect x="99.4752%" y="53" width="0.0262%" height="15" fill="rgb(234,150,53)" fg:x="133060" fg:w="35"/><text x="99.7252%" y="63.50"></text></g><g><title>[libc.so.6] (35 samples, 0.03%)</title><rect x="99.4752%" y="37" width="0.0262%" height="15" fill="rgb(228,201,54)" fg:x="133060" fg:w="35"/><text x="99.7252%" y="47.50"></text></g><g><title>nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;::transpose (89 samples, 0.07%)</title><rect x="99.5021%" y="373" width="0.0665%" height="15" fill="rgb(222,22,37)" fg:x="133096" fg:w="89"/><text x="99.7521%" y="383.50"></text></g><g><title>nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;::transpose_to_uninit (89 samples, 0.07%)</title><rect x="99.5021%" y="357" width="0.0665%" height="15" fill="rgb(237,53,32)" fg:x="133096" fg:w="89"/><text x="99.7521%" y="367.50"></text></g><g><title>matrixmultiply::gemm::pack (16 samples, 0.01%)</title><rect x="99.5686%" y="309" width="0.0120%" height="15" fill="rgb(233,25,53)" fg:x="133185" fg:w="16"/><text x="99.8186%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (15 samples, 0.01%)</title><rect x="99.5694%" y="293" width="0.0112%" height="15" fill="rgb(210,40,34)" fg:x="133186" fg:w="15"/><text x="99.8194%" y="303.50"></text></g><g><title>&lt;matrixmultiply::x86::FusedMulAdd as matrixmultiply::x86::SMultiplyAdd&gt;::multiply_add (375 samples, 0.28%)</title><rect x="99.5821%" y="181" width="0.2803%" height="15" fill="rgb(241,220,44)" fg:x="133203" fg:w="375"/><text x="99.8321%" y="191.50"></text></g><g><title>core::core_arch::x86::fma::_mm256_fmadd_ps (375 samples, 0.28%)</title><rect x="99.5821%" y="165" width="0.2803%" height="15" fill="rgb(235,28,35)" fg:x="133203" fg:w="375"/><text x="99.8321%" y="175.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_load_ps (35 samples, 0.03%)</title><rect x="99.8624%" y="181" width="0.0262%" height="15" fill="rgb(210,56,17)" fg:x="133578" fg:w="35"/><text x="100.1124%" y="191.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_moveldup_ps (14 samples, 0.01%)</title><rect x="99.9021%" y="181" width="0.0105%" height="15" fill="rgb(224,130,29)" fg:x="133631" fg:w="14"/><text x="100.1521%" y="191.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_permute2f128_ps (78 samples, 0.06%)</title><rect x="99.9125%" y="181" width="0.0583%" height="15" fill="rgb(235,212,8)" fg:x="133645" fg:w="78"/><text x="100.1625%" y="191.50"></text></g><g><title>matrixmultiply::gemm::gemm_packed (545 samples, 0.41%)</title><rect x="99.5806%" y="277" width="0.4074%" height="15" fill="rgb(223,33,50)" fg:x="133201" fg:w="545"/><text x="99.8306%" y="287.50"></text></g><g><title>matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (545 samples, 0.41%)</title><rect x="99.5806%" y="261" width="0.4074%" height="15" fill="rgb(219,149,13)" fg:x="133201" fg:w="545"/><text x="99.8306%" y="271.50"></text></g><g><title>matrixmultiply::gemm::gemm_packed::{{closure}} (544 samples, 0.41%)</title><rect x="99.5813%" y="245" width="0.4067%" height="15" fill="rgb(250,156,29)" fg:x="133202" fg:w="544"/><text x="99.8313%" y="255.50"></text></g><g><title>&lt;matrixmultiply::sgemm_kernel::KernelFma as matrixmultiply::kernel::GemmKernel&gt;::kernel (544 samples, 0.41%)</title><rect x="99.5813%" y="229" width="0.4067%" height="15" fill="rgb(216,193,19)" fg:x="133202" fg:w="544"/><text x="99.8313%" y="239.50"></text></g><g><title>matrixmultiply::sgemm_kernel::kernel_target_fma (544 samples, 0.41%)</title><rect x="99.5813%" y="213" width="0.4067%" height="15" fill="rgb(216,135,14)" fg:x="133202" fg:w="544"/><text x="99.8313%" y="223.50"></text></g><g><title>matrixmultiply::sgemm_kernel::kernel_x86_avx (544 samples, 0.41%)</title><rect x="99.5813%" y="197" width="0.4067%" height="15" fill="rgb(241,47,5)" fg:x="133202" fg:w="544"/><text x="99.8313%" y="207.50"></text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::Mul&lt;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::mul (573 samples, 0.43%)</title><rect x="99.5686%" y="373" width="0.4284%" height="15" fill="rgb(233,42,35)" fg:x="133185" fg:w="573"/><text x="99.8186%" y="383.50"></text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::Mul&lt;&amp;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for &amp;nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::mul (573 samples, 0.43%)</title><rect x="99.5686%" y="357" width="0.4284%" height="15" fill="rgb(231,13,6)" fg:x="133185" fg:w="573"/><text x="99.8186%" y="367.50"></text></g><g><title>nalgebra::base::blas_uninit::gemm_uninit (573 samples, 0.43%)</title><rect x="99.5686%" y="341" width="0.4284%" height="15" fill="rgb(207,181,40)" fg:x="133185" fg:w="573"/><text x="99.8186%" y="351.50"></text></g><g><title>matrixmultiply::gemm::gemm_loop (573 samples, 0.43%)</title><rect x="99.5686%" y="325" width="0.4284%" height="15" fill="rgb(254,173,49)" fg:x="133185" fg:w="573"/><text x="99.8186%" y="335.50"></text></g><g><title>matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (557 samples, 0.42%)</title><rect x="99.5806%" y="309" width="0.4164%" height="15" fill="rgb(221,1,38)" fg:x="133201" fg:w="557"/><text x="99.8306%" y="319.50"></text></g><g><title>matrixmultiply::gemm::gemm_loop::{{closure}} (557 samples, 0.42%)</title><rect x="99.5806%" y="293" width="0.4164%" height="15" fill="rgb(206,124,46)" fg:x="133201" fg:w="557"/><text x="99.8306%" y="303.50"></text></g><g><title>all (133,762 samples, 100%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(249,21,11)" fg:x="0" fg:w="133762"/><text x="0.2500%" y="687.50"></text></g><g><title>gamm (133,762 samples, 100.00%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(222,201,40)" fg:x="0" fg:w="133762"/><text x="0.2500%" y="671.50">gamm</text></g><g><title>_start (133,750 samples, 99.99%)</title><rect x="0.0090%" y="645" width="99.9910%" height="15" fill="rgb(235,61,29)" fg:x="12" fg:w="133750"/><text x="0.2590%" y="655.50">_start</text></g><g><title>__libc_start_main (133,750 samples, 99.99%)</title><rect x="0.0090%" y="629" width="99.9910%" height="15" fill="rgb(219,207,3)" fg:x="12" fg:w="133750"/><text x="0.2590%" y="639.50">__libc_start_main</text></g><g><title>[libc.so.6] (133,750 samples, 99.99%)</title><rect x="0.0090%" y="613" width="99.9910%" height="15" fill="rgb(222,56,46)" fg:x="12" fg:w="133750"/><text x="0.2590%" y="623.50">[libc.so.6]</text></g><g><title>main (133,750 samples, 99.99%)</title><rect x="0.0090%" y="597" width="99.9910%" height="15" fill="rgb(239,76,54)" fg:x="12" fg:w="133750"/><text x="0.2590%" y="607.50">main</text></g><g><title>std::rt::lang_start_internal (133,750 samples, 99.99%)</title><rect x="0.0090%" y="581" width="99.9910%" height="15" fill="rgb(231,124,27)" fg:x="12" fg:w="133750"/><text x="0.2590%" y="591.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (133,750 samples, 99.99%)</title><rect x="0.0090%" y="565" width="99.9910%" height="15" fill="rgb(249,195,6)" fg:x="12" fg:w="133750"/><text x="0.2590%" y="575.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (133,750 samples, 99.99%)</title><rect x="0.0090%" y="549" width="99.9910%" height="15" fill="rgb(237,174,47)" fg:x="12" fg:w="133750"/><text x="0.2590%" y="559.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (133,750 samples, 99.99%)</title><rect x="0.0090%" y="533" width="99.9910%" height="15" fill="rgb(206,201,31)" fg:x="12" fg:w="133750"/><text x="0.2590%" y="543.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (133,750 samples, 99.99%)</title><rect x="0.0090%" y="517" width="99.9910%" height="15" fill="rgb(231,57,52)" fg:x="12" fg:w="133750"/><text x="0.2590%" y="527.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (133,750 samples, 99.99%)</title><rect x="0.0090%" y="501" width="99.9910%" height="15" fill="rgb(248,177,22)" fg:x="12" fg:w="133750"/><text x="0.2590%" y="511.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (133,750 samples, 99.99%)</title><rect x="0.0090%" y="485" width="99.9910%" height="15" fill="rgb(215,211,37)" fg:x="12" fg:w="133750"/><text x="0.2590%" y="495.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (133,750 samples, 99.99%)</title><rect x="0.0090%" y="469" width="99.9910%" height="15" fill="rgb(241,128,51)" fg:x="12" fg:w="133750"/><text x="0.2590%" y="479.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (133,750 samples, 99.99%)</title><rect x="0.0090%" y="453" width="99.9910%" height="15" fill="rgb(227,165,31)" fg:x="12" fg:w="133750"/><text x="0.2590%" y="463.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (133,750 samples, 99.99%)</title><rect x="0.0090%" y="437" width="99.9910%" height="15" fill="rgb(228,167,24)" fg:x="12" fg:w="133750"/><text x="0.2590%" y="447.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (133,750 samples, 99.99%)</title><rect x="0.0090%" y="421" width="99.9910%" height="15" fill="rgb(228,143,12)" fg:x="12" fg:w="133750"/><text x="0.2590%" y="431.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (133,750 samples, 99.99%)</title><rect x="0.0090%" y="405" width="99.9910%" height="15" fill="rgb(249,149,8)" fg:x="12" fg:w="133750"/><text x="0.2590%" y="415.50">core::ops::function::FnOnce::call_once</text></g><g><title>gamm::main (133,750 samples, 99.99%)</title><rect x="0.0090%" y="389" width="99.9910%" height="15" fill="rgb(243,35,44)" fg:x="12" fg:w="133750"/><text x="0.2590%" y="399.50">gamm::main</text></g></svg></svg>